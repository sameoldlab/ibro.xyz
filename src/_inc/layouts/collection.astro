---
import type { CollectionEntry } from 'astro:content'
import Layout from './base.astro'
import '../css/type.css'

export interface Props {
	entries: CollectionEntry<'note'>[]
	title: string
}
const { entries, title } = Astro.props
---

<Layout {title}>
	<main>
		<header class='main'>
			<h1>{title}</h1>
			<button class='text'>Full</button>
			<button class='text'>Collapse</button>
		</header>
		<div class='articles' {collapse}>
			{
				entries.map(async entry => {
					const { Content } = await entry.render()
					return (
						<article class='note'>
							<header>
								<h2>
									{' '}
									<a class='' href={`/${entry.collection}/${entry.slug}`}>
										{(entry.data.title !== '' && <>{entry.data.title}</>) || (
											<>{entry.data.date.toLocaleDateString()}</>
										)}
									</a>{' '}
								</h2>
								{/* 									<p>
											<time datetime={entry.data.date.toISOString()}>
												<!--Only show date when page is untitled -->
												{entry.data.title !== "" && entry.data.date.toLocaleDateString()}
												</time>
												</p> */}
							</header>
							<div class='content'>
								<Content />
							</div>
						</article>
					)
				})
			}
		</div>
		<script>
			let collapsed = true
			const toggleCollapse = document.getElementById('toggleCollapse')!
			toggleCollapse.addEventListener('click', () => {
				if (!collapsed) {
					document
						.querySelectorAll('.content-text')
						.forEach(el => el.classList.add('collapsed'))
					toggleCollapse.innerHTML = `
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" >
			<path d="m7 15 5 5 5-5"></path>
			<path d="m7 9 5-5 5 5"></path>
		</svg>
		`
				} else {
					document
						.querySelectorAll('.content-text')
						.forEach(el => el.classList.remove('collapsed'))
					toggleCollapse.innerHTML = `
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" >
			<path d="m7 20 5-5 5 5"></path>
			<path d="m7 4 5 5 5-5"></path>
		</svg>
		
		`
				}
				collapsed = !collapsed
			})
			// document.getElementById("toggleCollapse").addEventListener("click", handleClick);
		</script>
	</main>
</Layout>

<style is:global>
	#toggleCollapse {
		color: var(--t-highlight);
		background: var(--bg);
		/* background: transparent; */
		padding: 0.15em 0.5em;
		border-radius: 4px;
		border: 0px;
		outline: 1px solid var(--bg-highlight);
		cursor: pointer;

		& > svg {
			width: 16px;
			height: 16px;
		}

		&:hover {
			background-color: var(--bg-highlight);
		}
	}

	button.text {
		font-weight: 300;
		/* font-style: italic; */
		color: var(--t-low);
		font-size: 1.25em;
		line-height: 2.5rem;
		/* font-variation-settings: 'opsz' 64; */
		cursor: pointer;
	}

	header {
		display: flex;
		/* justify-content: space-between; */
		align-items: baseline;
		gap: 1rem;
		flex-wrap: wrap-reverse;
		width: var(--width);
		margin-inline: auto;
	}

	.collapsed {
		.content {
			display: none;
			height: 0;
			opacity: 0;
			transition: opacity 140ms allow-discrete ease-in-out;
		}
	}
</style>
